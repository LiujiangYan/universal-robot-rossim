<launch>

  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find ur5_gazebo)/worlds/ur5.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->

  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find ur5_description)/urdf/ur5_robot.urdf.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!--  -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model ur5 -param robot_description"/>

  <!-- ros_control ur5 launch file -->
  <include file="$(find ur5_control)/launch/ur5_control.launch" />
  
<!--   <include file="$(find ur5_control)/launch/ur5_rqt.launch" /> -->

  <!-- show in rviz -->
  <!-- Combine joint values publish the state of a robot to tf. done in control.launch-->
<!--   <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/> -->

  <!-- Show in Rviz   -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find ur5_description)/launch/ur5.rviz"/>

</launch>
